# this module is generated by monogusa.web.codegen
import crud
import cli
from fastapi import (
    Depends,
    APIRouter,
    FastAPI,
)
import typing as t
from pydantic import BaseModel
from monogusa.web import runtime
import databases.core


async def db(database_url: str = Depends(cli.database_url)) -> cli.Database:
    return await cli.db(database_url)


router = APIRouter()


class AddInput(BaseModel):
    text: str
    completed: bool = False


@router.post("/add", response_model=runtime.CommandOutput)
async def add(input: AddInput, db: databases.core.Database = Depends(db)) -> t.Dict[str, t.Any]:
    with runtime.handle() as s:
        await crud.create_note(db, **input.dict())
    return s.dict()


@router.post("/list", response_model=runtime.CommandOutput)
async def list(db: databases.core.Database = Depends(db)) -> t.Dict[str, t.Any]:
    with runtime.handle() as s:
        await crud.read_notes(db)
    return s.dict()


@router.post("/init", response_model=runtime.CommandOutput)
def init(database_url: str = Depends(cli.database_url)) -> t.Dict[str, t.Any]:
    """
     init tables
    """
    with runtime.handle() as s:
        cli.init(database_url)
    return s.dict()


def main(app: FastAPI):
    from monogusa.web import cli

    cli.run(app)


app = FastAPI()
app.include_router(router)


if __name__ == '__main__':
    main(app=app)